Цель:
У класса есть только один экземпляр, и он предоставляет к нему глобальную точку доступа. Существенно то, что можно пользоваться именно экземпляром класса, так как при этом во многих случаях становится доступной более широкая функциональность. Например, к описанным компонентам класса можно обращаться через интерфейс, если такая возможность поддерживается языком.

Глобальный «одинокий» объект — именно объект, а не набор процедур, не привязанных ни к какому объекту — бывает нужен:

если используется существующая объектно-ориентированная библиотека;
если есть шансы, что один объект когда-нибудь превратится в несколько;
если интерфейс объекта (например, игрового мира) слишком сложен и не стоит засорять основное пространство имён большим количеством функций;
если, в зависимости от каких-нибудь условий и настроек, создаётся один из нескольких объектов. Например, в зависимости от того, ведётся лог или нет, создаётся или настоящий объект, пишущий в файл, или «заглушка», ничего не делающая.
Такие объекты можно создавать и при инициализации программы. Это может приводить к следующим трудностям:

Если объект нужен уже при инициализации, он может быть затребован раньше, чем будет создан.
Бывает, что объект нужен не всегда. В таком случае его создание можно пропустить.


Плюсы:
контролируемый доступ к единственному экземпляру.

Минусы:
глобальные объекты могут быть вредны для объектного программирования, в некоторых случаях приводят к созданию немасштабируемого проекта;
усложняет написание модульных тестов и следование TDD.



